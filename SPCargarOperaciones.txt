USE [bd2]
GO
/****** Object:  StoredProcedure [dbo].[CargarOperacionesXML]    Script Date: 19/6/2023 16:20:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[CargarOperacionesXML]
    @inPathXML NVARCHAR(512) -- Ruta del archivo XML
AS 
BEGIN
	--SET NOCOUNT ON;
    BEGIN TRY
		
		DECLARE @UsersAdmins INT=dbo.returnNUA(1);
		DECLARE @ADMIN BIT = 1

		-- Definir fechas de inicio y fin
		DECLARE @fechaInicio DATE;

		DECLARE @fechaFin DATE;

		DECLARE @fechaActual DATE;

		DECLARE @fecha VARCHAR(16);

		DECLARE @ResultadosTemp TABLE (
					Id INT IDENTITY (1,1) 
					,CodigoNuevo VARCHAR(16)
					,CodigoViejo VARCHAR(16)
					);

		DECLARE @THTemp TABLE (
			Nombre VARCHAR(32)
			,TipoDocIdentidad VARCHAR(32)
			,ValorDocIdentidad VARCHAR(32)
			,NombreUsuario VARCHAR(32)
			,[Password] VARCHAR(32)
		)

		DECLARE @NTCMTemp TABLE (
			Codigo VARCHAR(32)
			,TipoCTM VARCHAR(32)
			,LimiteDeCredito VARCHAR(32)
			,TH VARCHAR(32)
			,FechaOperacion VARCHAR(512)
		)
	
		DECLARE @NTCATemp TABLE (
			CodigoTCM VARCHAR(32)
			,CodigoTCA VARCHAR(32)
			,TH  VARCHAR(32)
	   )

	   DECLARE @NTFTemp TABLE (
			Codigo VARCHAR(32)
			,TCAsociada VARCHAR(32)
			,FechaVencimiento VARCHAR(32)
			,CCV  VARCHAR(32)
	   )

	   CREATE TABLE #MovimientoTemp (
			 Id INT IDENTITY (1,1) 
			,Nombre VARCHAR(128)
			,TF VARCHAR(32)
			,FechaMovimiento VARCHAR(32)
			,Monto VARCHAR(32)
			,Descripcion VARCHAR(32)
			,Referencia VARCHAR(32)
	   )
	   DECLARE @Fechas TABLE (
			Id INT IDENTITY (1,1) 
			,Fechas DATE
	   )

	   DECLARE @MovInteresesCorr TABLE(
			MontoDebitoInteresesCorrientes REAL
			,SaldoInteresesCorrientes REAL
	   )

	   DECLARE @MovInteresesMor TABLE(
			MontoPagoMinimoMoratorio REAL
			,MontoDebitoInteresesMoratorios REAL
			,SaldoInteresesMoratorios REAL
	   )

		-- Cargar los datos del XML en la variable de tabla
		DECLARE @XmlData XML
		DECLARE @OpenRowsetCmd NVARCHAR(MAX)
		SET @OpenRowsetCmd = 'SELECT @XmlData = CONVERT(XML, BulkColumn) FROM OPENROWSET(BULK ''' + @inPathXML + ''', SINGLE_BLOB) AS x'
		EXEC sp_executesql @OpenRowsetCmd, N'@XmlData XML OUTPUT', @XmlData OUTPUT

		INSERT INTO @Fechas (
			Fechas
		)
		SELECT CONVERT
		(DATE, T.X.value('@Fecha', 'VARCHAR(32)'), 120) AS Fecha
		FROM @XmlData.nodes('/root/fechaOperacion') AS T(X)

		SELECT @fechaInicio = F.Fechas
		FROM @Fechas F
		WHERE F.Id = 1

		SELECT @fechaFin = MAX(F.Fechas)
		FROM @Fechas F
		SET @fechaActual = @fechaInicio;

		WHILE @fechaActual <= @fechaFin
		BEGIN
	
		SET @fecha=CAST(@fechaActual AS VARCHAR(16));
		BEGIN TRANSACTION tNuevaTF
		IF EXISTS (SELECT Fechas FROM @Fechas S WHERE @fechaActual = S.Fechas)
			BEGIN
				DELETE FROM @THTemp;
				DELETE FROM @NTCMTemp;
				DELETE FROM @NTCATemp;
				DELETE FROM @NTFTemp;
				DELETE FROM #MovimientoTemp;

				-- Reiniciar el IDENTITY al valor inicial
				DBCC CHECKIDENT('#MovimientoTemp', RESEED, 0);

				-- Se limpian las tablas temporales para que no tengan informacion repetida
				--------------------------------------------------------------------------------------------------
				INSERT INTO @THTemp (
					Nombre
					,TipoDocIdentidad 
					,ValorDocIdentidad 
					,NombreUsuario 
					,[Password]
				)
				SELECT 
					T.X.value('@Nombre', 'VARCHAR(32)') AS Nombre
					,T.X.value('@Tipo_Doc_Identidad', 'VARCHAR(32)') AS TipoDocIdentidad
					,T.X.value('@Valor_Doc_Identidad', 'VARCHAR(32)') AS ValorDocIdentidad
					,T.X.value('@NombreUsuario', 'VARCHAR(32)') AS NombreUsuario
					,T.X.value('@Password', 'VARCHAR(32)') AS [Password]
				FROM @XmlData.nodes('/root/fechaOperacion/TH/TH') AS T(X)
				WHERE T.X.value('../../@Fecha', 'DATE') = @fechaActual;
				--------------------------------------------------------------------------------------------------
				INSERT INTO @NTCMTemp  (
					 Codigo 
					,TipoCTM 
					,LimiteDeCredito 
					,TH
					,FechaOperacion
				)
				SELECT 
					T.X.value('@Codigo', 'VARCHAR(32)') AS Codigo
					,T.X.value('@TipoCTM', 'VARCHAR(32)') AS TipoCTM
					,T.X.value('@LimiteCredito', 'VARCHAR(32)') AS LimiteDeCredito
					,T.X.value('@TH', 'VARCHAR(32)') AS TH
					,A.B.value('@Fecha', 'VARCHAR(32)') AS FechaOperacion
				FROM @XmlData.nodes('/root/fechaOperacion/NTCM/NTCM') AS T(X)
				CROSS APPLY T.X.nodes('../..') AS A(B)
				WHERE T.X.value('../../@Fecha', 'DATE') = @fechaActual;
				--------------------------------------------------------------------------------------------------
				INSERT INTO @NTCATemp  (
					CodigoTCM 
					,CodigoTCA 
					,TH  
				)
				SELECT 
					T.X.value('@CodigoTCM', 'VARCHAR(32)') AS CodigoTCM
					,T.X.value('@CodigoTCA', 'VARCHAR(32)') AS CodigoTCA
					,T.X.value('@TH', 'VARCHAR(32)') AS TH
				FROM @XmlData.nodes('/root/fechaOperacion/NTCA/NTCA') AS T(X)
				WHERE T.X.value('../../@Fecha', 'DATE') = @fechaActual;
				--------------------------------------------------------------------------------------------------
				INSERT INTO @NTFTemp  (
					Codigo
					,TCAsociada 
					,FechaVencimiento 
					,CCV 
				)
				SELECT 
					T.X.value('@Codigo', 'VARCHAR(32)') AS Codigo
					,T.X.value('@TCAsociada', 'VARCHAR(32)') AS TCAsociada
					,T.X.value('@FechaVencimiento', 'VARCHAR(32)') AS FechaVencimiento
					,T.X.value('@CCV', 'VARCHAR(32)') AS CCV
				FROM @XmlData.nodes('/root/fechaOperacion/NTF/NTF') AS T(X)
				WHERE T.X.value('../../@Fecha', 'DATE') = @fechaActual;
				--------------------------------------------------------------------------------------------------




				INSERT INTO #MovimientoTemp  (
					Nombre 
					,TF 
					,FechaMovimiento 
					,Monto
					,Descripcion 
					,Referencia 
				)
				SELECT 
					T.X.value('@Nombre', 'VARCHAR(128)') AS Nombre
					,T.X.value('@TF', 'VARCHAR(32)') AS TF
					,T.X.value('@FechaMovimiento', 'VARCHAR(32)') AS FechaMovimiento
					,T.X.value('@Monto', 'VARCHAR(32)') AS Monto
					,T.X.value('@Descripcion', 'VARCHAR(32)') AS Descripcion
					,T.X.value('@Referencia', 'VARCHAR(32)') AS Referencia
				FROM @XmlData.nodes('/root/fechaOperacion/Movimiento/Movimiento') AS T(X)
				WHERE T.X.value('../../@Fecha', 'DATE') = @fechaActual;
				--------------------------------------------------------------------------------------------------
				-- Realizar operaciones en base a los datos de la variable de tabla

				INSERT INTO TH(
					Nombre
					,ValorDocIdentidad
					,IdTDTH
					)
				SELECT 
					S.Nombre
					,S.ValorDocIdentidad
					,dbo.TDTHnombreToid(S.TipoDocIdentidad) 
				FROM @THTemp S

				INSERT INTO Usuario(
					NombreUsuario
					,EsAdmin
					,Pin
					)
				 SELECT 
					S.NombreUsuario
					,0
					,S.[Password]
				FROM @THTemp S

				UPDATE Usuario
				SET IdTH = TH.Id
				FROM Usuario
				INNER JOIN TH ON Usuario.Id = TH.Id + dbo.returnNUA(1)
				INNER JOIN @THTemp AS Temp ON TH.ValorDocIdentidad = Temp.ValorDocIdentidad
				WHERE Usuario.EsAdmin = 0;
	
				UPDATE TH
				SET IdUsuario = Usuario.Id
				FROM TH
				INNER JOIN Usuario ON TH.Id = Usuario.IdTH

				----------------------------------------------------------------------------------------------------

				INSERT INTO CT(
					EsMaestra
					,Codigo
					,IdTH
					)
				SELECT
					1
					,T.codigo
					,IdTH=dbo.THvalorDocToid(T.TH)
				FROM @NTCMTemp T

				INSERT INTO CTM(
				Id
				)
				SELECT
				Id
				FROM CT
				INNER JOIN @NTCMTemp AS Temp ON CT.Codigo = Temp.Codigo
				WHERE CT.EsMaestra=1

				 UPDATE CTM
				 SET
					Saldo=0
					,PagoMinimo=0
					,SaldoCorteEC=0
					,FechaCorte=CONVERT(DATE, temp.FechaOperacion)
					,SaldoInteresesCorrientes=0
					,IdTCTM=dbo.TCTMnombreToid(temp.TipoCTM)
				FROM CTM
				INNER JOIN CT ON CTM.Id=CT.Id
				INNER JOIN @NTCMTemp AS temp ON CT.Codigo =temp.Codigo
	
				----------------------------------------------------------------------------------------------------
	
				INSERT INTO CT(
					EsMaestra
					,Codigo
					,IdTH
					)
				SELECT
					0
					,T.CodigoTCA
					,IdTH=dbo.THvalorDocToid(T.TH)
				FROM @NTCATemp T

				INSERT INTO CTA(
				Id
				)
				SELECT
				Id
				FROM CT
				INNER JOIN @NTCATemp AS Temp ON CT.Codigo = Temp.CodigoTCA
				WHERE CT.EsMaestra=0
	
				UPDATE CTA
				 SET
					IdTCM=dbo.CodigoToTC(temp.CodigoTCM)
				FROM CTA
				INNER JOIN CT ON CTA.Id=CT.Id
				INNER JOIN @NTCATemp AS temp ON CT.Codigo =temp.CodigoTCA

				--------------------------------------------------------------------------------------------------
	
				UPDATE TH
				SET 
				IdCT = CT.Id
				FROM TH
				INNER JOIN CT ON TH.Id=CT.IdTH

				--------------------------------------------------------------------------------------------------
				INSERT INTO TF(
					 Nombre
					 ,FechaCaducacion
					 ,CCV
					 ,Codigo
					 ,IdCT
					 ,EsValida
					 )
				SELECT 
					TH.Nombre
					,CONVERT(DATE, '01/' + S.FechaVencimiento, 103)
					,S.CCV
					,S.Codigo
					,dbo.CodigoToTC(S.TCAsociada)
					,1
				FROM @NTFTemp S
				INNER JOIN TH ON dbo.CodigoToTC(S.TCAsociada) = TH.IdCT 
				------------------------------------------------------------------------------------------------
				INSERT INTO EC(
					 Saldo
					 ,PagoMin
					 ,Fecha
					 ,IntereseCorrientes
					 ,InteresMoratorios
					 ,ContadorATM
					 ,ContadorVentanilla
					 ,SUMPagosAntesFechaPagoMin
					 ,SUMPagos
					 ,QPagos
					 ,SUMCompras
					 ,QCompras
					 ,SUMRetiros
					 ,QRetiros
					 ,SUMCreditos
					 ,QCreditos
				     ,SUMDebitos
				     ,QDebitos			
					 ,IdCTM
					 )
				SELECT 
					0
					,0
					,@fecha
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,(SELECT Id FROM CT WHERE CT.Codigo=S.Codigo)
				FROM @NTCMTemp S

				------------------------------------------------------------------------------------------------
				INSERT INTO SubEC(
					 Saldo
					 ,PagoMin
					 ,Fecha
					 ,IntereseCorrientes
					 ,InteresMoratorios
					 ,ContadorATM
					 ,ContadorVentanilla
					 ,SUMPagosAntesFechaPagoMin
					 ,SUMPagos
					 ,QPagos
					 ,SUMCompras
					 ,QCompras
					 ,SUMRetiros
					 ,QRetiros
					 ,SUMCreditos
					 ,QCreditos
				     ,SUMDebitos
				     ,QDebitos			
					 ,IdCTA
					 )
				SELECT 
					0
					,0
					,@fecha
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,0
					,(SELECT Id FROM CT WHERE CT.Codigo=S.CodigoTCA)
				FROM @NTCATemp S
				------------------------------------------------------------------------------------------------
			END
			--------------------------------------------------------------------------------------------------
				-- Nuevos movimientos por perdida
				UPDATE TF
				SET 
				IdMI = MotivoInvalidacion.Id
				,EsValida=0
				FROM TF
				INNER JOIN #MovimientoTemp R ON TF.Codigo = R.TF
				INNER JOIN MotivoInvalidacion ON R.Nombre LIKE '%' + MotivoInvalidacion.Nombre + '%'
				WHERE R.Nombre='Recuperacion por Perdida' OR R.Nombre='Recuperacion por Robo'

				UPDATE TF
				SET 
				IdMI = (SELECT MotivoInvalidacion.Id FROM MotivoInvalidacion WHERE MotivoInvalidacion.Nombre='Vencimiento')
				,EsValida=0
				FROM TF
				WHERE ((YEAR(DATEFROMPARTS(YEAR(@fechaActual), MONTH(@fechaActual), 1)) >= YEAR(TF.FechaCaducacion) AND
				MONTH(DATEFROMPARTS(YEAR(@fechaActual), MONTH(@fechaActual), 1)) >= MONTH(TF.FechaCaducacion)) OR
				TF.FechaCaducacion='2023-08-01') 

			--------------------------------------------------------------------------------------------------
				-- Nuevos movimientos por renovacion
				INSERT #MovimientoTemp (
				Nombre
				,TF
				,FechaMovimiento
				,Monto
				,Descripcion
				,Referencia
				)
				SELECT
				(SELECT Nombre FROM MotivoInvalidacion WHERE MotivoInvalidacion.id=TF.IdMI)
				,TF.Codigo
				,@fecha
				,TCTMXRNMM.Monto
				,(SELECT Nombre FROM MotivoInvalidacion WHERE MotivoInvalidacion.id=TF.IdMI)
				,SUBSTRING(CONVERT(VARCHAR(40), NEWID()), 1, 5) --Genera un codigo de referencia aleatorio
				FROM CTM S
				INNER JOIN TF ON S.Id = TF.IdCT
				INNER JOIN RN ON S.IdTCTM = RN.IdTCTM
				INNER JOIN TCTMXRNMM ON RN.Id = TCTMXRNMM.Id
				WHERE (TF.IdMI=1 AND RN.Nombre = 'Reposicion de tarjeta de CTM')OR(TF.IdMI=2 AND RN.Nombre = 'Reposicion de tarjeta de CTM')OR(TF.IdMI=3 AND RN.Nombre = 'Cargo renovacion de TF de CTM');


				INSERT #MovimientoTemp (
				Nombre
				,TF
				,FechaMovimiento
				,Monto
				,Descripcion
				,Referencia
				)
				SELECT
				(SELECT Nombre FROM MotivoInvalidacion WHERE MotivoInvalidacion.id=TF.IdMI)
				,TF.Codigo
				,@fecha
				,TCTMXRNMM.Monto
				,(SELECT Nombre FROM MotivoInvalidacion WHERE MotivoInvalidacion.id=TF.IdMI)
				,SUBSTRING(CONVERT(VARCHAR(40), NEWID()), 1, 5) --Genera un codigo de referencia aleatorio
				FROM CTA S
				INNER JOIN TF ON S.Id = TF.IdCT
				INNER JOIN RN ON (SELECT R.IdTCTM FROM CTM R WHERE R.Id=S.IdTCM) = RN.IdTCTM
				INNER JOIN TCTMXRNMM ON RN.Id = TCTMXRNMM.Id
				WHERE (TF.IdMI=1 AND RN.Nombre = 'Reposicion de tarjeta de CTA')OR(TF.IdMI=2 AND RN.Nombre = 'Reposicion de tarjeta de CTA')OR(TF.IdMI=3 AND RN.Nombre = 'Cargo renovacion de TF de CTA');
			--------------------------------------------------------------------------------------------------
				DECLARE @MovimientosAUX TABLE(
				 Id INT IDENTITY (1,1) 
				,Nombre VARCHAR(128)
				,TF VARCHAR(32)
				,FechaMovimiento VARCHAR(32)
				,Monto VARCHAR(32)
				,Descripcion VARCHAR(32)
				,Referencia VARCHAR(32)
			 )
			 INSERT INTO @MovimientosAUX(
			 	 Nombre 
				,TF 
				,FechaMovimiento 
				,Monto
				,Descripcion 
				,Referencia 
				)
				SELECT 
				M.Nombre
				,M.TF
				,M.FechaMovimiento
				,M.Monto
				,M.Descripcion
				,M.Referencia
				FROM #MovimientoTemp M
				WHERE M.Nombre ='Vencimiento'

				INSERT INTO @MovimientosAUX(
				Nombre 
				,TF 
				,FechaMovimiento 
				,Monto
				,Descripcion 
				,Referencia 
				)
				SELECT 
				M.Nombre
				,M.TF
				,M.FechaMovimiento
				,M.Monto
				,M.Descripcion
				,M.Referencia
				FROM #MovimientoTemp M
				WHERE M.Nombre !='Vencimiento'

				DELETE FROM #MovimientoTemp
				-- Reiniciar el IDENTITY al valor inicial
				DBCC CHECKIDENT('#MovimientoTemp', RESEED, 0);

				INSERT INTO #MovimientoTemp(
				Nombre 
				,TF 
				,FechaMovimiento 
				,Monto
				,Descripcion 
				,Referencia 
				)
				SELECT 
				M.Nombre
				,M.TF
				,M.FechaMovimiento
				,M.Monto
				,M.Descripcion
				,M.Referencia
				FROM @MovimientosAUX M

			--------------------------------------------------------------------------------------------------
				DECLARE @NumeroTarjetaFisica VARCHAR(50);
				DECLARE @TF VARCHAR(50);

				DECLARE MyCursor CURSOR FOR
				SELECT 
				NuevaTF.NumeroTarjetaFisica
				,M.TF
				FROM TF
				INNER JOIN #MovimientoTemp M ON TF.Codigo = M.TF
				INNER JOIN NuevaTF ON 0 = NuevaTF.Usado
				WHERE (M.Nombre = 'Vencimiento' OR M.Nombre = 'Robo' OR M.Nombre = 'Perdida')
					AND NuevaTF.Id NOT IN (SELECT Id FROM @ResultadosTemp)
					AND M.TF NOT IN (SELECT CodigoViejo FROM @ResultadosTemp WHERE CodigoViejo IS NOT NULL);

				OPEN MyCursor;
				FETCH NEXT FROM MyCursor INTO @NumeroTarjetaFisica, @TF;

				WHILE @@FETCH_STATUS = 0
				BEGIN
					INSERT INTO @ResultadosTemp (
					CodigoNuevo
					,CodigoViejo)
					VALUES (
					@NumeroTarjetaFisica
					,@TF);
					FETCH NEXT FROM MyCursor INTO @NumeroTarjetaFisica, @TF;
				END;

				CLOSE MyCursor;
				DEALLOCATE MyCursor;

				UPDATE NuevaTF
				SET Usado=1
				FROM NuevaTF
				INNER JOIN @ResultadosTemp temp ON NuevaTF.NumeroTarjetaFisica= temp.CodigoNuevo


			--------------------------------------------------------------------------------------------------
					UPDATE #MovimientoTemp
					SET TF = R.CodigoNuevo
					FROM #MovimientoTemp M
					INNER JOIN @ResultadosTemp R ON M.TF = R.CodigoViejo
					WHERE M.Nombre='Robo' OR M.Nombre='Perdida' 
			--------------------------------------------------------------------------------------------------
				DECLARE @IdMovimiento2 INT = 1;
				DECLARE @NombreMovimiento2 VARCHAR(128) = '';

				--SELECT Id FROM #MovimientoTemp M WHERE (M.Nombre='Recuperacion por Perdida' OR M.Nombre='Recuperacion por Robo' OR M.Nombre='Vencimiento')AND TF =(SELECT TF FROM #MovimientoTemp WHERE #MovimientoTemp.Id=@IdMovimiento)


				WHILE @IdMovimiento2<= (SELECT MAX(Id) FROM #MovimientoTemp)
				BEGIN
				SET @NombreMovimiento2= (SELECT Nombre FROM #MovimientoTemp WHERE #MovimientoTemp.Id=@IdMovimiento2)
				IF EXISTS (
					SELECT *
					FROM #MovimientoTemp AS MT
					WHERE MT.Id = @IdMovimiento2
						AND (MT.Nombre = 'Recuperacion por Perdida' OR MT.Nombre = 'Recuperacion por Robo' OR MT.Nombre = 'Vencimiento')
						AND NOT EXISTS (
							SELECT *
							FROM movimientoSospechoso AS MS
							WHERE  MS.Descripcion = MT.Nombre AND MS.Monto=MT.Monto
						)
				)
				BEGIN
					INSERT INTO MovimientoSospechoso(
					Monto
					,Fecha
					,Descripcion
					,IdTF
					,IdCT
					)
					SELECT
					M.Monto
					,M.FechaMovimiento
					,M.Nombre
					,(SELECT Id FROM TF WHERE TF.Codigo=M.TF)
					,(SELECT IdCT FROM TF WHERE TF.Codigo=M.TF)
					FROM #MovimientoTemp M
					INNER JOIN @ResultadosTemp R ON M.TF = R.CodigoViejo
					WHERE M.Id>@IdMovimiento2 AND M.TF= (SELECT TF FROM #MovimientoTemp WHERE #MovimientoTemp.Id=@IdMovimiento2)
					
				END
				SET @IdMovimiento2=@IdMovimiento2+1
				END
			--------------------------------------------------------------------------------------------------
					UPDATE #MovimientoTemp
					SET TF = R.CodigoNuevo
					FROM #MovimientoTemp M
					INNER JOIN @ResultadosTemp R ON M.TF = R.CodigoViejo
					WHERE M.Nombre='Vencimiento' 
			--------------------------------------------------------------------------------------------------
				DECLARE @IdMovimiento INT = 1;
				DECLARE @NombreMovimiento VARCHAR(128) = '';

				--SELECT Id FROM #MovimientoTemp M WHERE (M.Nombre='Recuperacion por Perdida' OR M.Nombre='Recuperacion por Robo' OR M.Nombre='Vencimiento')AND TF =(SELECT TF FROM #MovimientoTemp WHERE #MovimientoTemp.Id=@IdMovimiento)


				WHILE @IdMovimiento<= (SELECT MAX(Id) FROM #MovimientoTemp)
				BEGIN
				SET @NombreMovimiento= (SELECT Nombre FROM #MovimientoTemp WHERE #MovimientoTemp.Id=@IdMovimiento)
				 IF @NombreMovimiento='Recuperacion por Perdida' OR @NombreMovimiento='Recuperacion por Robo' OR @NombreMovimiento='Vencimiento'
				BEGIN
					UPDATE #MovimientoTemp
					SET TF = R.CodigoNuevo
					FROM #MovimientoTemp M
					INNER JOIN @ResultadosTemp R ON M.TF = R.CodigoViejo
					WHERE M.Id<@IdMovimiento AND M.TF= (SELECT TF FROM #MovimientoTemp WHERE #MovimientoTemp.Id=@IdMovimiento)	AND NOT EXISTS (
							SELECT *
							FROM movimientoSospechoso AS MS
							WHERE  MS.Descripcion = M.Nombre AND MS.Monto=M.Monto
						)
				END
				SET @IdMovimiento=@IdMovimiento+1
				END
			--------------------------------------------------------------------------------------------------

				UPDATE TF
				SET 
				Codigo = R.CodigoNuevo
				,IdMI = NULL
				,EsValida=1
				FROM TF
				INNER JOIN @ResultadosTemp R ON TF.Codigo = R.CodigoViejo
				WHERE R.CodigoNuevo NOT IN (SELECT Codigo FROM TF) AND (SELECT Nombre FROM MotivoInvalidacion WHERE MotivoInvalidacion.id=TF.IdMI)!='Vencimiento'

				UPDATE TF
				SET 
				Codigo = R.CodigoNuevo
				,FechaCaducacion =DATEADD(YEAR, 1, FechaCaducacion)
				,IdMI = NULL
				,EsValida=1
				FROM TF
				INNER JOIN @ResultadosTemp R ON TF.Codigo = R.CodigoViejo
				WHERE R.CodigoNuevo NOT IN (SELECT Codigo FROM TF)AND (SELECT Nombre FROM MotivoInvalidacion WHERE MotivoInvalidacion.id=TF.IdMI)='Vencimiento'
				
			--------------------------------------------------------------------------------------------------
				DECLARE @CodigoTF VARCHAR(16);
				DECLARE @Monto VARCHAR(16);
				DECLARE @Acumula_Operacion_ATM VARCHAR(8);
				DECLARE @Acumula_Operacion_Ventana VARCHAR(8);
				DECLARE @NombreMov VARCHAR(16);

				DECLARE @MovimientoID INT; -- Variable para almacenar el Id del movimiento

				--SELECT
				--	*
				--	FROM @MovimientoTemp T
				--	INNER JOIN TF ON T.TF = TF.Codigo
				--	INNER JOIN EC ON TF.IdCT=EC.IdCTM
				--	WHERE (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito' 

				SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN EC ON TF.IdCT=EC.IdCTM
					WHERE ((SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito') OR (T.Nombre='Vencimiento'OR T.Nombre='Robo' OR T.Nombre='Perdida')
					);


				WHILE @MovimientoID IS NOT NULL
				BEGIN
					-- Obtener los valores correspondientes al movimiento actual
	
					SET @CodigoTF = (SELECT TF.Codigo FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Monto = (SELECT T.Monto FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_ATM = (SELECT TM.Acumula_Operacion_ATM FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre  WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_Ventana = (SELECT TM.Acumula_Operacion_Ventana FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre  WHERE T.Id = @MovimientoID);
					SET @NombreMov = (SELECT TM.Nombre FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);


					-- Realizar la actualización
					UPDATE EC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					WHERE (SELECT T.nombre FROM #MovimientoTemp T WHERE T.Id = @MovimientoID)='Vencimiento'OR (SELECT T.nombre FROM #MovimientoTemp T WHERE T.Id = @MovimientoID)='Robo' OR(SELECT T.nombre FROM #MovimientoTemp T WHERE T.Id = @MovimientoID)='Perdida';

					UPDATE EC
					SET 
					QCompras= QCompras+1
					,SUMCompras=SUMCompras + CONVERT(MONEY, @Monto)
					WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@NombreMov = 'Compra');

					UPDATE EC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					,ContadorATM = ContadorATM +1
					,QRetiros= QRetiros+1
					,SUMRetiros=SUMRetiros + CONVERT(MONEY, @Monto)
					,QDebitos=QDebitos+1
					,SUMDebitos=SUMDebitos + CONVERT(MONEY, @Monto)
					WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@Acumula_Operacion_ATM = 'SI');
	
					UPDATE EC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					,ContadorVentanilla = ContadorVentanilla +1
					,QRetiros= QRetiros+1
					,SUMRetiros=SUMRetiros + CONVERT(MONEY, @Monto)
					,QDebitos=QDebitos+1
					,SUMDebitos=SUMDebitos + CONVERT(MONEY, @Monto)
					WHERE IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND (@Acumula_Operacion_Ventana = 'SI') ;
	
					UPDATE EC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					,QDebitos=QDebitos+1
					,SUMDebitos=SUMDebitos + CONVERT(MONEY, @Monto)
					WHERE IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND  ((@Acumula_Operacion_Ventana = 'NO') AND  (@Acumula_Operacion_ATM = 'NO'));


					-- Obtener el siguiente movimiento

					SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN EC ON TF.IdCT=EC.IdCTM
					WHERE T.Id > @MovimientoID
						AND (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito');
				END;

				--SELECT *
				--	FROM EC
				--	INNER JOIN TF ON EC.IdCTM = TF.IdCT
				--	INNER JOIN @MovimientoTemp T ON TF.Codigo  = T.TF
				--	INNER JOIN TM ON T.Nombre = TM.Nombre
				--	WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (TM.Acumula_Operacion_ATM = 'SI');

			----------------------------------------------------------------------------------------------------
				--SELECT
				--	*
				--	FROM @MovimientoTemp T
				--	INNER JOIN TF ON T.TF = TF.Codigo
				--	INNER JOIN EC ON TF.IdCT=EC.IdCTM
				--	WHERE (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito' 

				SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN EC ON TF.IdCT=EC.IdCTM
					WHERE (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Credito');

	
				WHILE @MovimientoID IS NOT NULL
				BEGIN
					-- Obtener los valores correspondientes al movimiento actual
	
					SET @CodigoTF = (SELECT TF.Codigo FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Monto = (SELECT T.Monto FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_ATM = (SELECT TM.Acumula_Operacion_ATM FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_Ventana = (SELECT TM.Acumula_Operacion_Ventana FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);
					SET @NombreMov = (SELECT TM.Nombre FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);


					-- Realizar la actualización
					UPDATE EC
					SET 
					QPagos= QPagos+1
					,SUMPagos=SUMPagos + CONVERT(MONEY, @Monto)
					WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@NombreMov = 'Pago en Linea');

					UPDATE EC
					SET 
					Saldo = Saldo - CONVERT(MONEY, @Monto)
					,ContadorATM = ContadorATM +1
					,QPagos= QPagos+1
					,SUMPagos=SUMPagos + CONVERT(MONEY, @Monto)
					,QCreditos=QCreditos+1
					,SUMCreditos=SUMCreditos + CONVERT(MONEY, @Monto)
					WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@Acumula_Operacion_ATM = 'SI');
	
					UPDATE EC
					SET 
					Saldo = Saldo - CONVERT(MONEY, @Monto)
					,ContadorVentanilla = ContadorVentanilla +1
					,QPagos= QPagos+1
					,SUMPagos=SUMPagos + CONVERT(MONEY, @Monto)
					,QCreditos=QCreditos+1
					,SUMCreditos=SUMCreditos + CONVERT(MONEY, @Monto)
					WHERE IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND (@Acumula_Operacion_Ventana = 'SI') ;
	
					UPDATE EC
					SET 
					Saldo = Saldo - CONVERT(MONEY, @Monto)
					,QCreditos=QCreditos+1
					,SUMCreditos=SUMCreditos + CONVERT(MONEY, @Monto)
					WHERE IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND  ((@Acumula_Operacion_Ventana = 'NO') AND  (@Acumula_Operacion_ATM = 'NO'));


					-- Obtener el siguiente movimiento

					SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN EC ON TF.IdCT=EC.IdCTM
					WHERE T.Id > @MovimientoID
						AND (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Credito');
				END;

				--SELECT *
				--	FROM EC
				--	INNER JOIN TF ON EC.IdCTM = TF.IdCT
				--	INNER JOIN @MovimientoTemp T ON TF.Codigo  = T.TF
				--	INNER JOIN TM ON T.Nombre = TM.Nombre
				--	WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (TM.Acumula_Operacion_ATM = 'SI');


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


				--SELECT
				--	*
				--	FROM @MovimientoTemp T
				--	INNER JOIN TF ON T.TF = TF.Codigo
				--	INNER JOIN EC ON TF.IdCT=EC.IdCTM
				--	WHERE (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito' 

				SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN SubEC ON TF.IdCT=SubEC.IdCTA
					WHERE ((SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito') OR (T.Nombre='Vencimiento'OR T.Nombre='Robo' OR T.Nombre='Perdida')
					);


	
				WHILE @MovimientoID IS NOT NULL
				BEGIN
					-- Obtener los valores correspondientes al movimiento actual
	
					SET @CodigoTF = (SELECT TF.Codigo FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Monto = (SELECT T.Monto FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_ATM = (SELECT TM.Acumula_Operacion_ATM FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_Ventana = (SELECT TM.Acumula_Operacion_Ventana FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);
					SET @NombreMov = (SELECT TM.Nombre FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);


					-- Realizar la actualización
					UPDATE SubEC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					WHERE (SELECT T.nombre FROM #MovimientoTemp T WHERE T.Id = @MovimientoID)='Vencimiento'OR (SELECT T.nombre FROM #MovimientoTemp T WHERE T.Id = @MovimientoID)='Robo' OR(SELECT T.nombre FROM #MovimientoTemp T WHERE T.Id = @MovimientoID)='Perdida';
					
					UPDATE SubEC
					SET 
					QCompras= QCompras+1
					,SUMCompras=SUMCompras + CONVERT(MONEY, @Monto)
					WHERE (IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@NombreMov = 'Compra');

					UPDATE SubEC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					,ContadorATM = ContadorATM +1
					,QRetiros= QRetiros+1
					,SUMRetiros=SUMRetiros + CONVERT(MONEY, @Monto)
					,QDebitos=QDebitos+1
					,SUMDebitos=SUMDebitos + CONVERT(MONEY, @Monto)
					WHERE (IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@Acumula_Operacion_ATM = 'SI');
	
					UPDATE SubEC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					,ContadorVentanilla = ContadorVentanilla +1
					,QRetiros= QRetiros+1
					,SUMRetiros=SUMRetiros + CONVERT(MONEY, @Monto)
					,QDebitos=QDebitos+1
					,SUMDebitos=SUMDebitos + CONVERT(MONEY, @Monto)
					WHERE IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND (@Acumula_Operacion_Ventana = 'SI') ;
	
					UPDATE SubEC
					SET 
					Saldo = Saldo + CONVERT(MONEY, @Monto)
					,QDebitos=QDebitos+1
					,SUMDebitos=SUMDebitos + CONVERT(MONEY, @Monto)
					WHERE IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND  ((@Acumula_Operacion_Ventana = 'NO') AND  (@Acumula_Operacion_ATM = 'NO'));


					-- Obtener el siguiente movimiento

					SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN SubEC ON TF.IdCT=SubEC.IdCTA
					WHERE T.Id > @MovimientoID
						AND (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito');
				END;

				--SELECT *
				--	FROM EC
				--	INNER JOIN TF ON EC.IdCTM = TF.IdCT
				--	INNER JOIN @MovimientoTemp T ON TF.Codigo  = T.TF
				--	INNER JOIN TM ON T.Nombre = TM.Nombre
				--	WHERE (IdCTM = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (TM.Acumula_Operacion_ATM = 'SI');

			----------------------------------------------------------------------------------------------------
				--SELECT
				--	*
				--	FROM @MovimientoTemp T
				--	INNER JOIN TF ON T.TF = TF.Codigo
				--	INNER JOIN EC ON TF.IdCT=EC.IdCTM
				--	WHERE (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Debito' 

				SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN SubEC ON TF.IdCT=SubEC.IdCTA
					WHERE (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Credito');



	
				WHILE @MovimientoID IS NOT NULL
				BEGIN
					-- Obtener los valores correspondientes al movimiento actual
	
					SET @CodigoTF = (SELECT TF.Codigo FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Monto = (SELECT T.Monto FROM #MovimientoTemp T INNER JOIN TF ON T.TF = TF.Codigo WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_ATM = (SELECT TM.Acumula_Operacion_ATM FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);
					SET @Acumula_Operacion_Ventana = (SELECT TM.Acumula_Operacion_Ventana FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);
					SET @NombreMov = (SELECT TM.Nombre FROM #MovimientoTemp T INNER JOIN TM ON T.Nombre = TM.Nombre WHERE T.Id = @MovimientoID);


					-- Realizar la actualización
					UPDATE SubEC
					SET 
					QPagos= QPagos+1
					,SUMPagos=SUMPagos + CONVERT(MONEY, @Monto)
					WHERE (IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@NombreMov = 'Pago en Linea');

					UPDATE SubEC
					SET 
					Saldo = Saldo - CONVERT(MONEY, @Monto)
					,ContadorATM = ContadorATM +1
					,QPagos= QPagos+1
					,SUMPagos=SUMPagos + CONVERT(MONEY, @Monto)
					,QCreditos=QCreditos+1
					,SUMCreditos=SUMCreditos + CONVERT(MONEY, @Monto)
					WHERE (IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF)) AND (@Acumula_Operacion_ATM = 'SI');
	
					UPDATE SubEC
					SET 
					Saldo = Saldo - CONVERT(MONEY, @Monto)
					,ContadorVentanilla = ContadorVentanilla +1
					,QPagos= QPagos+1
					,SUMPagos=SUMPagos + CONVERT(MONEY, @Monto)
					,QCreditos=QCreditos+1
					,SUMCreditos=SUMCreditos + CONVERT(MONEY, @Monto)
					WHERE IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND (@Acumula_Operacion_Ventana = 'SI') ;
	
					UPDATE SubEC
					SET 
					Saldo = Saldo - CONVERT(MONEY, @Monto)
					,QCreditos=QCreditos+1
					,SUMCreditos=SUMCreditos + CONVERT(MONEY, @Monto)
					WHERE IdCTA = (SELECT IdCT FROM TF WHERE Codigo = @CodigoTF) AND  ((@Acumula_Operacion_Ventana = 'NO') AND  (@Acumula_Operacion_ATM = 'NO'));


					-- Obtener el siguiente movimiento

					SET @MovimientoID = (
					SELECT
					MIN(T.Id)
					FROM #MovimientoTemp T
					INNER JOIN TF ON T.TF = TF.Codigo
					INNER JOIN SubEC ON TF.IdCT=SubEC.IdCTA
					WHERE T.Id > @MovimientoID
						AND (SELECT Accion FROM TM WHERE TM.Nombre = T.Nombre) = 'Credito');
				END;

			----------------------------------------------------------------------------------------------------
				UPDATE CTM
				SET
				Saldo=EC.Saldo
				,LastECId=EC.Id
				FROM CTM
				INNER JOIN EC ON CTM.Id = EC.IdCTM

			----------------------------------------------------------------------------------------------------
				INSERT @MovInteresesCorr (
					MontoDebitoInteresesCorrientes
					,SaldoInteresesCorrientes
				)
				SELECT
					S.Saldo*TCTMXRNTasa.Tasa/100/30
					,SaldoInteresesCorrientes + S.Saldo*TCTMXRNTasa.Tasa/100/30
				FROM CTM S
				INNER JOIN RN ON S.IdTCTM = RN.IdTCTM -- sacar la tasa de interes de RN
				INNER JOIN TCTMXRNTasa ON RN.Id = TCTMXRNTasa.Id
				WHERE S.Saldo>0 AND RN.Nombre='Tasa de interes corriente'

			----------------------------------------------------------------------------------------------------
				--INSERT @MovInteresesMor (... monto, )
				--SELECT ..... (CE.EC.PagoMinimo-EC.SumaPagos)*Rn.TasaInteresMor/1000/30, ....
				--FROM CTM 
				--inner join EC.Id=CTM.LastId
				--WHERE EC.SumaPagos<EC.PagoMinimo
				--.....  -- sacar la tasa de interes de RN
				--WHERE CTM.Saldo>0
			--------------------------------------------------------------------------------------------------
				SELECT * FROM CTM
				SELECT * FROM MovimientoSospechoso 
				SELECT * FROM EC 
				SELECT * FROM SubEC 
				--SELECT * FROM CTA
				--SELECT * FROM CTM
				SELECT * FROM #MovimientoTemp
				--SELECT * FROM TF
				--SELECT * FROM NuevaTF
				--SELECT * FROM @ResultadosTemp
				--SELECT * FROM TF
				--SELECT * FROM @MovimientoTemp 
				--DELETE FROM @ResultadosTemp
		

				IF @fechaActual=@fechaInicio
				BEGIN
				SET @fechaActual='G'
				END
			
				COMMIT TRANSACTION tNuevaTF
			

		-----Fecha de Corte-----
		SET @fechaActual = DATEADD(DAY, 1, @fechaActual);

		END
	END TRY 
	BEGIN CATCH
		IF @@TRANCOUNT>0  -- Error sucedio dentro de la transacción
			BEGIN
				ROLLBACK TRANSACTION tNuevaTF; -- Se deshacen los cambios realizados
				DBCC CHECKIDENT(CT,RESEED,0)
				DBCC CHECKIDENT(TF,RESEED,0)
				DBCC CHECKIDENT(TH,RESEED,0)
				DBCC CHECKIDENT(EC,RESEED,0)
				DBCC CHECKIDENT(SubEC,RESEED,0)
				DBCC CHECKIDENT(MovimientoSospechoso,RESEED,0)
				DBCC CHECKIDENT(Usuario,RESEED,@UsersAdmins)
			END;
		INSERT INTO dbo.DBErrors
    
			VALUES (
			  SUSER_SNAME(),
			  ERROR_NUMBER(),
			  ERROR_STATE(),
			  ERROR_SEVERITY(),
			  ERROR_LINE(),
			  ERROR_PROCEDURE(),
			  ERROR_MESSAGE(),
			  GETDATE()
			);
			RETURN
	END CATCH
	--SET NOCOUNT OFF;
END
